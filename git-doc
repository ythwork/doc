1. git add한 파일 (staged)을 해제
git rm --cached {file}

2. .gitignore
*.a             확장자가 .a 무시
!lib.a          .a 확장자는 무시하지만 lib.a는 무시하지 않음
/TODO           현재 디렉토리의 TODO 파일 무시, 서브 디렉토리 파일은 무시하지 않음
build/          build/ 디렉토리에 있는 모든 파일 무시
doc/*.txt       doc/notes.txt는 무시 doc/server/arch.txt 파일은 무시하지 않음
doc/**/*.pdf    doc 하위 모두 무시

3. git diff 
  working directory와 staging area를 비교한다. 

4. git diff --staged 
  한번 커밋된 파일을 수정한 후 add 하면 두 객체는 staging area와 저장소에 있다. 
  staing area와 저장소에 커밋한 것 비교 

5. git rm -f {file}
  staged 파일을 삭제하면서 working directory에서도 지운다 

5. git rm --cached {file}
  staged 파일을 staging area에서만 지운다 

  git rm --cached log/\*.log 
  log/ 디렉토리에 있는 모든 .log 파일 삭제

6. git commit --amend
  커밋 후 파일 수정 -> staging area에 추가 -> --amend 옵션 사용

7. git reset HEAD {file}
  staged에서 unstaged로 변경

8. git remote
  현재 프로젝트에 등록된 리모트 저장소 확인 
  저장소를 clone 하면 origin 리모트 저장소가 자동으로 등록

9. git remote -v
  리모트 저장소의 단축이름과 URL을 함께 확인할 수 있다

10. git remote add {단축이름} {URL}
  git remote add myremote https://github.com/ythwork/minisoda-ddd

11. git fetch {remote}
  로컬에는 없고 리모트에 있는 데이터를 가져옴 
  머지하지 않는다.

12. git pull

13. git push {remote} {local branch}
   다른 사람이 push 했다면 merge 후에 push 할 수 있다

14. git remote show {remote}

15. git remote rename {old remote} {new remote}

16. git remote remove {remote}
  리모트 저장소 삭제 

17. git log -p 
  각 커밋의 diff 결과를 보여줌

17. git log --oneline --decorate
  브랜치가 어떤 커밋을 가리키는지 알 수 있다

18. git log --oneline --decorate --graph --all
  히스토리를 출력한다 HEAD와 브랜치를 확인할 수 있다 

18. git commit --amend
  이전에 커밋한 것을 이번 커밋으로 덮어씌운다
  중요한 점은 이전 커밋은 히스토리에 남지 않는다 

19. git checkout -- {file}
  working directory의 파일을 최근 커밋된 버전으로 되돌린다 

19. git checkout -b {local branch}
  브랜치 만들면서 변경

19. git log --oneline --decorate --graph --all
  브랜치를 그래프로 그려준다 

20. git merge {local branch}
  마스터에서 머지
  Fast-forward : 머지하는 브랜치가 가리키는 커밋이 마스터가 가리키는 커밋에 기반한다면 단순히 최신 커밋으로 이동하면 된다

21. git branch -d {local branch}
  머지한 후 필요 없어진 브랜치 삭제

22. 3-way merge
  머지하는 브랜치와 머지될 브랜치가 가리키는 커밋이 다른 가지로 뻗어나간 경 경우, 
  공통 조상 커밋 하나를 사용 

23. git branch -v
  브랜치마다 마지막 커밋 메시지 보여줌

================================================

Ch2. 리모트 브랜치

1. remote tracking branch
  {remote}/{remote branch}
  리모트 서버에 연결될 때 마다 업데이트될 뿐이다.(변경 불가)
  리모트 서버에 마지막으로 연결되었을 때 브랜치가 어떤 커밋을 가리키고 있었는지 보여준다
  git fetch {remote} 하고 수정 가능한 로컬 브랜치가 생기는 것이 아니다. 리모트 트래킹 브랜치는 변경 불가이기 때문이다  

  git ls-remote {remote}
  리모트 refs를 조회한다

  git remote show {remote}
  

2. git fetch {remote}로 리모트 서버를 동기화 하면
  {remote}/{remote branch}와 {local branch}가 가리키는 커밋은 서로 다르다

3. git remote add team {URL} 하고 git fetch team 으로 team 서버의 데이터를 내려받으면
  로컬에는 master와 리모트 트래킹 브랜치인 origin/master, team/master 이렇게 세 개의 브랜치가 있음

4. 쓰기 권한이 있는 리모트 저장소에 push
  git push {remote} {local branch}

5. 로컬 브랜치와 리모트 서버의 브랜치 이름이 다를 때
  git push {remote} {local branch}:{remote branch}

6. git fetch {remote} 후 새로 받은 브랜치를 머지할 경우
  git merge {remote}/{remote branch}

7. 리모트 트래킹 브랜치에서 시작하는 새 브랜치
  git checkout -b {local branch} {remote}/{remote branch}

7. IF EXISTS ${local branch} THEN
		git fetch ${remote}
		git merge ${remote}/{remote branch}
   ELSE THEN
		git fetch ${remote}
		git checkout -b ${local branch} ${remote}/{remote branch}
 
		// this {local branch} is modifiable
		//  "TRACKING BRANCH"
		// and the branch in the remote server is "UPSTREAM BRANCH"



리모트 트래킹 브랜치를 로컬 브랜치로 checkout하면 트래킹 브랜치가 만들어진다
이 때 트래킹 브랜치가 트래킹하는 리모트 서버의 브랜치는 upstream branch이다
트래킹 브랜치는 로컬 브랜치로 리모트 브랜치와 연결되어 있다.
트래킹 브랜치에서 git pull 하면 리모트 저장소에서 데이터를 내려 받아 리모트 브랜치와 자동으로 머지한다.

8. 트래킹 브랜치를 만드는 방법(간접적인 방법)
  git clone을 하면 자동으로 master 브랜치를 origin/master 브랜치의 트래킹 브랜치로 만든다 

8. 리모트의 특정 브랜치만 clone
  git clone -b {local branch = remote branch} --single-branch {remote URL}


8. 트래킹 브랜치를 만드는 방법(직접적인 방법)
  git checkout -b {local branch} {remote}/{remote branch}
8. 로컬 브랜치를 리모트 브랜치 이름과 같게 만든다.
  git checkout --track {remote}/{remote branch}

9. 8번의 축약형 git checkout {local branch}
  브랜치가 리모트에 오직 하나 있고 로컬에는 없으면 트래킹 브랜치를 만들어준다
9. 이미 존재하는 로컬 브랜치를 트래킹 브랜치로 만드는 방법
  git branch -u|--set-upstream-to {remote}/{remote branch}

10. git branch -vv
  로컬 브랜치와 로컬 브랜치가 추적하고 있는 리모트 브랜치를 보여준다 
  {local branch} ... [{remote}/{remote branch}: ahead 1, behind 1]
  로컬 브랜치는 리모트 브랜치를 추적하는데 현재 리모트 서버에 없는 커밋이 하나 있고
  리모트 브랜치에는 로컬 브랜치에 없는 커밋이 하나 있다. 

11. 리모트 서버의 최신 데이터의 추적 상황을 알아보려면 서버에서 최신 데이터를 받아온 후에 추적 상황을 확인
  git fetch --all; git branch -vv

12. 리모트 브랜치 삭제 
  git push {remote} --delete {remote branch}


상황
내가 토픽 브랜치를 따서 작업하던 도중 동료가 push 했다는 것을 알게되었다.
동료가 push한 커밋을 일단 가져온다.
  git fetch origin

이때 로컬 저장소의 모습은 다음과 같다.
  
master                     issue54
  |                           |
fbff5  ....................4af42
        72bbc
	      |
	    origin/master

origin/master와 머지해야 한다. 토픽 브랜치 작업을 마치고 어떤 내용이 머지되는지 git log로 확인
  git log --no-merge issue54..origin/master

origin/master와 issue54를 모두 머지
  git checkout master
  git merge issue54
  git merge origin/master

머지한 후에는 master가 origin/master에 앞선다. 이때 리모트 서버에 push 해서 동기화 한다.
  git push origin master





